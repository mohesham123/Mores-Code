// include the required libraries for the lcd
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
//declare object lcd from the class
LiquidCrystal_I2C lcd(0x27, 16, 2);
char x;
// initialize 2 arrays the first one with the alphabet and the second one
with the corrisponding morse code
char chars[26] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };
String codes[26] = { ".- ", "-...", "-.-.", "-.. ", ". ", "..-.", "--. ",
"....", ".. ", ".---", "-.- ", ".-..", "-- ", "-. ", "--- ", ".--.", "--.-
", ".-. ", "... ", "- ", "..- ", "...-", ".-- ", "-..-", "-.--", "--.." };
// declare the pins we used
const int buzzer = 12;
const int laser_signal = 13;
// declare the timings
const int dot_delay = 250;
const int dash_delay = 3 * dot_delay;
const int blank_dalay = dot_delay;
const int short_gap = dash_delay;
const int medium_gap = 7 * dot_delay;
// declare some function to be used
char issmol(char character); // this function checks if the letter is
uppercase or lowercase if it is lowercase convert it into uppercase
void dash(); // this function generates dash signal
void dot(); // this function generates dot signal
void setup() {
// initialize the serial monitor with bet rate 9600
Serial.begin(9600);
// initialize the pins used in the project
pinMode(laser_signal, OUTPUT);
pinMode(buzzer, OUTPUT);
lcd.begin();
}
void loop() {
lcd.cursor();
if (Serial.available()){
delay(10);
while (Serial.available() > 0){
// read a letter from the buffer
x = Serial.read();
// check if the letter is space then stop for "medium_gap"
if (x == ' ') {
delay(medium_gap);
continue;
}
x = issmol(x); // convert the lowercase letter to uppercase and
return the letter if it is uppercase
// set cursor at first line and print the letter
lcd.setCursor(0, 0);
lcd.print(x);
// set cursor at second line and print morse code
lcd.setCursor(0, 1);
// checks if the letter is numeric and if it is enter the numbers
algorithm
if (x <= '9' && x >= '0') {
x = x - 48;
int i = 5;
if (x<=5 and x != 0){
for (; i != 5 - x; i--) {
dot();
}
for (; i != 0; i--) {
dash();
}
} else if (x==0){
for (; i < 5; i++) {
dash();
}
}
else {
for (; i != 5 - x; i--) {
dash();
}
for (; i != 0; i--) {
dot();
}
}
delay(short_gap);
lcd.clear();
continue;
}
// enter choosing character algorithm
int i = 0;
// this statement is used to get the index of the letter then use
it as index for the morse code
while (x != chars[i]){
i++;
}
char code[4];
// copy the morse code "string" to character array to itterate on
it
strcpy(code, codes[i].c_str());
// translate the morse code "characters" into signals
for (int i = 0; i < 4; i++){
if (code[i] == '.'){
dot();
}
else if (code[i] == '-'){
dash();
}
else {
break;
}
}
delay(short_gap);
lcd.clear();
}
}
}
char issmol(char character){
if (character > 90){
return character - 32;
}else {
return character;
}
}
void dash() {
digitalWrite(laser_signal,1);
lcd.print('-');
delay(dash_delay);
digitalWrite(laser_signal,0);
delay(blank_dalay);
}
void dot() {
digitalWrite(laser_signal,1);
lcd.print('.');
delay(dot_delay);
digitalWrite(laser_signal,0);
delay(blank_dalay);
}
